import 'dart:developer';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:equatable/equatable.dart';
import 'package:http_parser/http_parser.dart';

class Ad extends Equatable {
  final String adTitle, description, category;
  final String? id,
      city,
      publishedVia,
      regulationStatus,
      floor,
      floorNumber,
      deed,
      propertyType,
      currency,
      saleOrRent,
      listingstatus,
      version,
      doors,
      seats,
      innerpart,
      color,
      /////////
      horsePower,
      engineCapacity,
      drivetrain,
      imported,
      manufacturingYear,
      carType ,
      /////////
      type,
      propertyCondition,
      deliveryConditions,
      propertyLocation,
      rentalRate,
      rentalFees,
      paymentMethod,
      price,
      name,
      phoneNumber,
      brand,
      user,
      transmissionType,
      year,
      kilometers,
      downPayment;
  final List<dynamic>? contactMethod;
  final List<String>? images, amenities, fuelType, additionalFeatures;
  final List<File>? imageFiles;
  final num? numberOfRooms,
      numberOfBathrooms,
      numberOfSalons,
      count1,
      count2,
      count3,
      count4,
      count5,
      securityDeposit,
      ratingAverage,
      ratingQuantity,
      area,
      lat,
      long;
  final bool? furnishing, negotiable, post, pending, rejected;
  final DateTime createdAt, updatedAt;

  const Ad({
    required this.createdAt,
    required this.updatedAt,
    required this.adTitle,
    required this.description,
    required this.category,
    this.floorNumber,
    this.id,
    this.currency,
    this.publishedVia,
    this.city,
    this.regulationStatus,
    this.floor,
    this.deed,
    this.propertyType,
    this.area,
    this.saleOrRent,
    this.listingstatus,
    this.version,
    this.doors,
    this.seats,
    this.innerpart,
    this.color,
    /////////////
    this.horsePower,
    this.engineCapacity,
    this.drivetrain,
    this.imported,
    this.manufacturingYear,
    this.carType,
    ///////////
    this.type,
    this.propertyCondition,
    this.deliveryConditions,
    this.propertyLocation,
    this.rentalRate,
    this.rentalFees,
    this.paymentMethod,
    this.price,
    this.name,
    this.phoneNumber,
    this.contactMethod,
    this.brand,
    this.user,
    this.images,
    this.amenities,
    this.fuelType,
    this.additionalFeatures,
    this.imageFiles,
    this.numberOfRooms,
    this.numberOfBathrooms,
    this.numberOfSalons,
    this.year,
    this.count1,
    this.count2,
    this.count3,
    this.count4,
    this.count5,
    this.securityDeposit,
    this.ratingAverage,
    this.ratingQuantity,
    this.furnishing,
    this.negotiable,
    this.transmissionType,
    this.kilometers,
    this.downPayment,
    this.lat,
    this.long,
    this.post,
    this.pending,
    this.rejected,
  });

  factory Ad.fromJson(Map<String, dynamic> json) {
    log("json: ${json['createdAt']}");
    return Ad(
      id: json['_id'],
      publishedVia: json['publishedVia'],
      adTitle: json['ad title'] ?? '',
      description: json['description'] ?? '',
      category: json['category'] ?? '',
      currency: json['currency'] ?? '',
      propertyType: json['property type'],
      city: json['city'],
      regulationStatus: json['regulationStatus'],
      floor: json['floor'],
      deed: json['deedType'],
      floorNumber: json['number of building floors'],
      area: num.tryParse(json['area']?.toString() ?? ''),
      saleOrRent: json['sale or rent'],
      listingstatus: json['listing status'],
      version: json['version'],
      doors: json['number of doors'],
      seats: json['number of sets'],
      innerpart: json['inner part'],
      color: json['color'],
      /////////////////////
      horsePower: json['Horsepower'],
      engineCapacity: json['Engine Capacity'],
      drivetrain: json['Drivetrain'],
      imported: json['Imported'],
      manufacturingYear: json['Manufacturing Year'],
      carType: json['Car Type'],
      /////////////////////
      type: json['type'],
      propertyCondition: json['property condition'],
      deliveryConditions: json['delivery conditions'],
      propertyLocation: json['property location'],
      rentalRate: json['rental rate'],
      rentalFees: json['rental fees'],
      paymentMethod: json['payment method'],
      price: json['price'],
      name: json['name'],
      phoneNumber: json['phone number'].toString(),
      contactMethod: json['contact method'],
      brand: json['brand'],
      user: json['user'],
      images: json['images'] != null ? List<String>.from(json['images']) : null,
      amenities: json['amenities'] != null
          ? List<String>.from(json['amenities'])
          : null,
      fuelType: json['fuel type'] != null
          ? List<String>.from(json['fuel type'])
          : null,
      additionalFeatures: json['additional features'] != null
          ? List<String>.from(json['additional features'])
          : null,
      numberOfRooms: json['number of rooms'],
      numberOfSalons: json['number of livingRooms'],
      numberOfBathrooms: json['number of bathrooms'],
      year: json['year'],
      count1: json['count1'],
      count2: json['count2'],
      count3: json['count3'],
      count4: json['count4'],
      count5: json['count5'],
      securityDeposit: json['security deposit'],
      ratingAverage: json['rating average'],
      ratingQuantity: json['rating quantity'],
      furnishing: json['furnishing'],
      negotiable: json['negotiable'],
      transmissionType: json['transmission type'],
      kilometers: json['kilometers'],
      downPayment: json['down payment'],
      lat: json['lat'],
      long: json['long'],
      post: json['post'],
      pending: json['pending'],
      rejected: json['rejected'],
      createdAt: DateTime.tryParse(json['createdAt'] ?? '') ?? DateTime.now(),
      updatedAt: DateTime.tryParse(json['updatedAt'] ?? '') ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toJson() => {
        'ad title': adTitle,
        'description': description,
        'category': category,
        'currency': currency,
        'city': city,
        'publishedVia': publishedVia,
        'regulationStatus': regulationStatus,
        'floor': floor,
        'deedType': deed,
        'number of building floors': floorNumber,
        'property type': propertyType,
        'area': area,
        'sale or rent': saleOrRent,
        'listing status': listingstatus,
        'version': version,
        'number of doors': doors,
        'number of sets': seats,
        'inner part': innerpart,
        'color': color,
        ///////////////
        'Horsepower': horsePower,
        'Engine Capacity': engineCapacity,
        'Drivetrain': drivetrain,
        'Imported': imported,
        'Manufacturing Year': manufacturingYear,
        'Car Type': carType,
        ///////////////
        'type': type,
        'property condition': propertyCondition,
        'delivery conditions': deliveryConditions,
        'property location': propertyLocation,
        'rental rate': rentalRate,
        'rental fees': rentalFees,
        'payment method': paymentMethod,
        'price': price,
        'name': name,
        'phone number': phoneNumber,
        'contact method': contactMethod,
        'brand': brand,
        'user': user,
        'images': images,
        'amenities': amenities,
        'fuel type': fuelType,
        'additional features': additionalFeatures,
        'number of rooms': numberOfRooms,
        'number of livingRooms': numberOfSalons,
        'number of bathrooms': numberOfBathrooms,
        'year': year,
        'count1': count1,
        'count2': count2,
        'count3': count3,
        'count4': count4,
        'count5': count5,
        'security deposit': securityDeposit,
        'rating average': ratingAverage,
        'rating quantity': ratingQuantity,
        'furnishing': furnishing,
        'negotiable': negotiable,
        'transmission type': transmissionType,
        'kilometers': kilometers,
        'down payment': downPayment,
        'lat': lat,
        'long': long,
        'post': post,
        'pending': pending,
        'rejected': rejected,
        'createdAt': createdAt.toIso8601String(),
        'updatedAt': updatedAt.toIso8601String(),
      };

  Future<FormData> toFormData() async {
    List<MultipartFile> files = [];
    if (imageFiles != null) {
      for (File file in imageFiles!) {
        files.add(await MultipartFile.fromFile(
          file.path,
          contentType: MediaType("image", file.path.split(".").last),
        ));
      }
    }

    return FormData.fromMap({
      'ad title': adTitle,
      'description': description,
      'category': category,
      // 'currency': currency,
      if (currency != null) 'currency': currency,
      if (propertyType != null) 'property type': propertyType,
      if (city != null) 'city': city,
      if (publishedVia != null) 'publishedVia': publishedVia,
      if (regulationStatus != null) 'regulationStatus': regulationStatus,
      if (floor != null) 'floor': floor,
      if (deed != null) 'deedType': deed,
      if (floorNumber != null) 'number of building floors': floorNumber,
      if (area != null) 'area': area,
      if (saleOrRent != null) 'sale or rent': saleOrRent,
      if (listingstatus != null) 'listing status': listingstatus,
      if (version != null) 'version': version,
      if (doors != null) 'number of doors': doors,
      if (seats != null) 'number of sets': seats,
      if (innerpart != null) 'inner part': innerpart,
      if (color != null) 'color': color, 
         ///////////////
      if (horsePower != null)   'Horsepower': horsePower,
       if (engineCapacity != null)  'Engine Capacity': engineCapacity,
       if (drivetrain != null)  'Drivetrain': drivetrain,
       if (imported != null)  'Imported': imported,
       if (manufacturingYear != null)  'Manufacturing Year': manufacturingYear,
       if (carType != null)  'Car Type': carType,
        ///////////////
      if (type != null) 'type': type,
      if (propertyCondition != null) 'property condition': propertyCondition,
      if (deliveryConditions != null) 'delivery conditions': deliveryConditions,
      if (propertyLocation != null) 'property location': propertyLocation,
      if (rentalRate != null) 'rental rate': rentalRate,
      if (rentalFees != null) 'rental fees': rentalFees,
      if (paymentMethod != null) 'payment method': paymentMethod,
      if (price != null) 'price': price,
      if (name != null) 'name': name,
      if (phoneNumber != null) 'phone number': phoneNumber,
      if (contactMethod != null) 'contact method': contactMethod,
      if (brand != null) 'brand': brand,
      if (user != null) 'user': user,
      // if (imageFiles != null)
      //   for (var i = 0; i < imageFiles!.length; i++) ...{
      //     'images[$i]':
      //         imageFiles?.map((e) => MultipartFile.fromFileSync(e.path)),
      //   },
      if (imageFiles != null) 'images': files,

      if (amenities != null) 'amenities': amenities,
      if (fuelType != null) 'fuel type': fuelType,
      if (additionalFeatures != null) 'additional features': additionalFeatures,
      if (numberOfRooms != null) 'number of rooms': numberOfRooms,
      if (numberOfSalons != null) 'number of livingRooms': numberOfSalons,
      if (numberOfBathrooms != null) 'number of bathrooms': numberOfBathrooms,
      if (year != null) 'year': year,
      if (count1 != null) 'count1': count1,
      if (count2 != null) 'count2': count2,
      if (count3 != null) 'count3': count3,
      if (count4 != null) 'count4': count4,
      if (count5 != null) 'count5': count5,
      if (securityDeposit != null) 'security deposit': securityDeposit,
      if (ratingAverage != null) 'rating average': ratingAverage,
      if (ratingQuantity != null) 'rating quantity': ratingQuantity,
      if (furnishing != null) 'furnishing': furnishing,
      if (negotiable != null) 'negotiable': negotiable,
      if (transmissionType != null) 'transmission type': transmissionType,
      if (kilometers != null) 'kilometers': kilometers,
      if (downPayment != null) 'down payment': downPayment,
      if (lat != null) 'lat': lat,
      if (long != null) 'long': long,
    });
  }

  @override
  List<Object?> get props => [
        id,
        publishedVia,
        adTitle,
        description,
        category,
        currency,
        propertyType,
        city,
        publishedVia,
        regulationStatus,
        floor,
        deed,
        floorNumber,
        area,
        saleOrRent,
        listingstatus,
        version,
        doors,
        seats,
        innerpart,
        color,
           ///////////////
         horsePower,
         engineCapacity,
        drivetrain,
        imported,
        manufacturingYear,
       carType,
        ///////////////
        type,
        propertyCondition,
        deliveryConditions,
        propertyLocation,
        rentalRate,
        rentalFees,
        paymentMethod,
        price,
        name,
        phoneNumber,
        contactMethod,
        brand,
        user,
        images,
        amenities,
        fuelType,
        additionalFeatures,
        imageFiles,
        numberOfRooms,
        numberOfSalons,
        numberOfBathrooms,
        year,
        count1,
        count2,
        count3,
        count4,
        count5,
        securityDeposit,
        ratingAverage,
        ratingQuantity,
        furnishing,
        negotiable,
        transmissionType,
        kilometers,
        downPayment,
        lat,
        long,
        post,
        pending,
        rejected,
        createdAt,
        updatedAt,
      ];
}
